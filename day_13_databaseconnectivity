
============================================================


The settings.py file contains all the project settings along with database connection details. 
By default, Django works with SQLite, database and allows configuring for other databases as well.

Database connectivity requires all the connection details such as database name, user credentials, 
hostname drive name etc.

To connect with MySQL, django.db.backends.
mysql driver is used to establishing a connection between application and database. Let's see an example.

settings.py
===========

step 1: views--> tools --> database --> data source --> mysql--> ex: college (db)
add header file:
----------------
from django.db.backends.mysql.base import DatabaseWrapper
DatabaseWrapper.data_types['DateTimeField'] = 'datetime'
------------------------

DATABASES = {  
    'default': {  
        'ENGINE': 'django.db.backends.mysql',  
        'NAME': 'college',    // here college is database name
        'USER':'root',  
        'PASSWORD':'mysql',  
        'HOST':'localhost',  
        'PORT':'3306'  
    }  
}  
----------------------------------
After providing details, check the connection using the migrate command.
-----------------------------
$ python3 manage.py migrate  
-----------------------------
This command will create tables for admin, auth, contenttypes, and sessions.
Now, access to the MySQL database and see the database from the list of databases.
The created database contains the following tables.
======================================================
open terminal:

pip install mysqlclient  (if MySQLdb import error)
(or)
pip install MySQL-python
or (no need)
pip install mysql-connector-python
====================================================

Migrating Model
---------------------
Well, till here, we have learned to connect Django application to the MySQL database. 
Next, we will see how to create a table using the model.

Each Django's model is mapped to a table in the database. 
So after creating a model, we need to migrate it. Let's see an example.

Suppose, we have a model class Employee in the models.py file that contains the following code.

// models.py

from django.db import models  
class Employee(models.Model):  
    eid      = models.CharField(max_length=20)  
    ename    = models.CharField(max_length=100)  
    econtact = models.CharField(max_length=15)  
    class Meta:  
        db_table = "employee"  
Django first creates a migration file that contains the details of table structure. 
To create migration use the following command.
===============================
$ python3 manage.py makemigrations  
================================

0001.initial.py (myapp--> migrations folder -->this file is automattically created)
=========
from django.db import migrations, models  
class Migration(migrations.Migration):  
    initial = True  
    dependencies = [  
    ]  
    operations = [  
        migrations.CreateModel(  
            name='Employee',  
            fields=[  
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),  
                ('eid', models.CharField(max_length=20)),  
                ('ename', models.CharField(max_length=100)),  
                ('econtact', models.CharField(max_length=15)),  
            ],  
            options={  
                'db_table': 'employee',  
            },  
        ),  
    ]  
Now, migrate to reflect the changes into the database.

===================or=======forms.py=======
from MyApp13.models import Employee

class EmpFormdb(forms.ModelForm):
    class Meta:
        model = Employee
        fields = "__all__"

===========================================

$ python3 manage.py migrate  

Check the database again, now it contains the employee table.

See, a table is present in the database. Well, 
we have successfully established a connection between our Django application and MySQL database.

admin.py
========
from django.contrib import admin
# Register your models here.
from MyApp13.models import Employee
admin.site.register(Employee) # Employee is registered

> python manage.py migrate
> python mangae.py createsuperuser
username:gowthaman
password:password
repeat password: password
email: gowthaman@niit-karur.com

>python manage.py runserver
open browser

http://127.0.0.1:8000/admin
username:
password:
login

employee --> add, del,update

pycharm:
    view-->tools window --> database --> mysql --> query console --> new query console
    
    select * from tablename.
    
    
    



